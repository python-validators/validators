"""Country Codes."""
# -*- coding: utf-8 -*-

# local
from .utils import validator

alpha2_list = [
    "AF",
    "AX",
    "AL",
    "DZ",
    "AS",
    "AD",
    "AO",
    "AI",
    "AQ",
    "AG",
    "AR",
    "AM",
    "AW",
    "AU",
    "AT",
    "AZ",
    "BS",
    "BH",
    "BD",
    "BB",
    "BY",
    "BE",
    "BZ",
    "BJ",
    "BM",
    "BT",
    "BO",
    "BQ",
    "BA",
    "BW",
    "BV",
    "BR",
    "IO",
    "BN",
    "BG",
    "BF",
    "BI",
    "CV",
    "KH",
    "CM",
    "CA",
    "KY",
    "CF",
    "TD",
    "CL",
    "CN",
    "CX",
    "CC",
    "CO",
    "KM",
    "CD",
    "CG",
    "CK",
    "CR",
    "CI",
    "HR",
    "CU",
    "CW",
    "CY",
    "CZ",
    "DK",
    "DJ",
    "DM",
    "DO",
    "EC",
    "EG",
    "SV",
    "GQ",
    "ER",
    "EE",
    "SZ",
    "ET",
    "FK",
    "FO",
    "FJ",
    "FI",
    "FR",
    "GF",
    "PF",
    "TF",
    "GA",
    "GM",
    "GE",
    "DE",
    "GH",
    "GI",
    "GR",
    "GL",
    "GD",
    "GP",
    "GU",
    "GT",
    "GG",
    "GN",
    "GW",
    "GY",
    "HT",
    "HM",
    "HN",
    "HK",
    "HU",
    "IS",
    "IN",
    "ID",
    "IR",
    "IQ",
    "IE",
    "IM",
    "IL",
    "IT",
    "JM",
    "JP",
    "JE",
    "JO",
    "KZ",
    "KE",
    "KI",
    "KP",
    "KR",
    "KW",
    "KG",
    "LA",
    "LV",
    "LB",
    "LS",
    "LR",
    "LY",
    "LI",
    "LT",
    "LU",
    "MO",
    "MK",
    "MG",
    "MW",
    "MY",
    "MV",
    "ML",
    "MT",
    "MH",
    "MQ",
    "MR",
    "MU",
    "YT",
    "MX",
    "FM",
    "MD",
    "MC",
    "MN",
    "ME",
    "MS",
    "MA",
    "MZ",
    "MM",
    "NA",
    "NR",
    "NP",
    "NL",
    "NC",
    "NZ",
    "NI",
    "NE",
    "NG",
    "NU",
    "NF",
    "MP",
    "NO",
    "OM",
    "PK",
    "PW",
    "PS",
    "PA",
    "PG",
    "PY",
    "PE",
    "PH",
    "PN",
    "PL",
    "PT",
    "PR",
    "QA",
    "RE",
    "RO",
    "RU",
    "RW",
    "BL",
    "SH",
    "KN",
    "LC",
    "MF",
    "PM",
    "VC",
    "WS",
    "SM",
    "ST",
    "SA",
    "SN",
    "RS",
    "SC",
    "SL",
    "SG",
    "SX",
    "SK",
    "SI",
    "SB",
    "SO",
    "ZA",
    "GS",
    "SS",
    "ES",
    "LK",
    "SD",
    "SR",
    "SJ",
    "SE",
    "CH",
    "SY",
    "TW",
    "TJ",
    "TZ",
    "TH",
    "TL",
    "TG",
    "TK",
    "TO",
    "TT",
    "TN",
    "TR",
    "TM",
    "TC",
    "TV",
    "UG",
    "UA",
    "AE",
    "GB",
    "UM",
    "US",
    "UY",
    "UZ",
    "VU",
    "VE",
    "VN",
    "VG",
    "VI",
    "WF",
    "EH",
    "YE",
    "ZM",
    "ZW",
]
alpha3_list = [
    "AFG",
    "ALA",
    "ALB",
    "DZA",
    "ASM",
    "AND",
    "AGO",
    "AIA",
    "ATA",
    "ATG",
    "ARG",
    "ARM",
    "ABW",
    "AUS",
    "AUT",
    "AZE",
    "BHS",
    "BHR",
    "BGD",
    "BRB",
    "BLR",
    "BEL",
    "BLZ",
    "BEN",
    "BMU",
    "BTN",
    "BOL",
    "BES",
    "BIH",
    "BWA",
    "BVT",
    "BRA",
    "IOT",
    "BRN",
    "BGR",
    "BFA",
    "BDI",
    "CPV",
    "KHM",
    "CMR",
    "CAN",
    "CYM",
    "CAF",
    "TCD",
    "CHL",
    "CHN",
    "CXR",
    "CCK",
    "COL",
    "COM",
    "COD",
    "COG",
    "COK",
    "CRI",
    "CIV",
    "HRV",
    "CUB",
    "CUW",
    "CYP",
    "CZE",
    "DNK",
    "DJI",
    "DMA",
    "DOM",
    "ECU",
    "EGY",
    "SLV",
    "GNQ",
    "ERI",
    "EST",
    "SWZ",
    "ETH",
    "FLK",
    "FRO",
    "FJI",
    "FIN",
    "FRA",
    "GUF",
    "PYF",
    "ATF",
    "GAB",
    "GMB",
    "GEO",
    "DEU",
    "GHA",
    "GIB",
    "GRC",
    "GRL",
    "GRD",
    "GLP",
    "GUM",
    "GTM",
    "GGY",
    "GIN",
    "GNB",
    "GUY",
    "HTI",
    "HMD",
    "HND",
    "HKG",
    "HUN",
    "ISL",
    "IND",
    "IDN",
    "IRN",
    "IRQ",
    "IRL",
    "IMN",
    "ISR",
    "ITA",
    "JAM",
    "JPN",
    "JEY",
    "JOR",
    "KAZ",
    "KEN",
    "KIR",
    "PRK",
    "KOR",
    "KWT",
    "KGZ",
    "LAO",
    "LVA",
    "LBN",
    "LSO",
    "LBR",
    "LBY",
    "LIE",
    "LTU",
    "LUX",
    "MAC",
    "MKD",
    "MDG",
    "MWI",
    "MYS",
    "MDV",
    "MLI",
    "MLT",
    "MHL",
    "MTQ",
    "MRT",
    "MUS",
    "MYT",
    "MEX",
    "FSM",
    "MDA",
    "MCO",
    "MNG",
    "MNE",
    "MSR",
    "MAR",
    "MOZ",
    "MMR",
    "NAM",
    "NRU",
    "NPL",
    "NLD",
    "NCL",
    "NZL",
    "NIC",
    "NER",
    "NGA",
    "NIU",
    "NFK",
    "MNP",
    "NOR",
    "OMN",
    "PAK",
    "PLW",
    "PSE",
    "PAN",
    "PNG",
    "PRY",
    "PER",
    "PHL",
    "PCN",
    "POL",
    "PRT",
    "PRI",
    "QAT",
    "REU",
    "ROU",
    "RUS",
    "RWA",
    "BLM",
    "SHN",
    "KNA",
    "LCA",
    "MAF",
    "SPM",
    "VCT",
    "WSM",
    "SMR",
    "STP",
    "SAU",
    "SEN",
    "SRB",
    "SYC",
    "SLE",
    "SGP",
    "SXM",
    "SVK",
    "SVN",
    "SLB",
    "SOM",
    "ZAF",
    "SGS",
    "SSD",
    "ESP",
    "LKA",
    "SDN",
    "SUR",
    "SJM",
    "SWE",
    "CHE",
    "SYR",
    "TWN",
    "TJK",
    "TZA",
    "THA",
    "TLS",
    "TGO",
    "TKL",
    "TON",
    "TTO",
    "TUN",
    "TUR",
    "TKM",
    "TCA",
    "TUV",
    "UGA",
    "UKR",
    "ARE",
    "GBR",
    "UMI",
    "USA",
    "URY",
    "UZB",
    "VUT",
    "VEN",
    "VNM",
    "VGB",
    "VIR",
    "WLF",
    "ESH",
    "YEM",
    "ZMB",
    "ZWE",
]
numeric_list = [
    "004",
    "248",
    "008",
    "012",
    "016",
    "020",
    "024",
    "660",
    "010",
    "028",
    "032",
    "051",
    "533",
    "036",
    "040",
    "031",
    "044",
    "048",
    "050",
    "052",
    "112",
    "056",
    "084",
    "204",
    "060",
    "064",
    "068",
    "535",
    "070",
    "072",
    "074",
    "076",
    "086",
    "096",
    "100",
    "854",
    "108",
    "132",
    "116",
    "120",
    "124",
    "136",
    "140",
    "148",
    "152",
    "156",
    "162",
    "166",
    "170",
    "174",
    "180",
    "178",
    "184",
    "188",
    "384",
    "191",
    "192",
    "531",
    "196",
    "203",
    "208",
    "262",
    "212",
    "214",
    "218",
    "818",
    "222",
    "226",
    "232",
    "233",
    "748",
    "231",
    "238",
    "234",
    "242",
    "246",
    "250",
    "254",
    "258",
    "260",
    "266",
    "270",
    "268",
    "276",
    "288",
    "292",
    "300",
    "304",
    "308",
    "312",
    "316",
    "320",
    "831",
    "324",
    "624",
    "328",
    "332",
    "334",
    "340",
    "344",
    "348",
    "352",
    "356",
    "360",
    "364",
    "368",
    "372",
    "833",
    "376",
    "380",
    "388",
    "392",
    "832",
    "400",
    "398",
    "404",
    "296",
    "408",
    "410",
    "414",
    "417",
    "418",
    "428",
    "422",
    "426",
    "430",
    "434",
    "438",
    "440",
    "442",
    "446",
    "807",
    "450",
    "454",
    "458",
    "462",
    "466",
    "470",
    "584",
    "474",
    "478",
    "480",
    "175",
    "484",
    "583",
    "498",
    "492",
    "496",
    "499",
    "500",
    "504",
    "508",
    "104",
    "516",
    "520",
    "524",
    "528",
    "540",
    "554",
    "558",
    "562",
    "566",
    "570",
    "574",
    "580",
    "578",
    "512",
    "586",
    "585",
    "275",
    "591",
    "598",
    "600",
    "604",
    "608",
    "612",
    "616",
    "620",
    "630",
    "634",
    "638",
    "642",
    "643",
    "646",
    "652",
    "654",
    "659",
    "662",
    "663",
    "666",
    "670",
    "882",
    "674",
    "678",
    "682",
    "686",
    "688",
    "690",
    "694",
    "702",
    "534",
    "703",
    "705",
    "090",
    "706",
    "710",
    "239",
    "728",
    "724",
    "144",
    "729",
    "740",
    "744",
    "752",
    "756",
    "760",
    "158",
    "762",
    "834",
    "764",
    "626",
    "768",
    "772",
    "776",
    "780",
    "788",
    "792",
    "795",
    "796",
    "798",
    "800",
    "804",
    "784",
    "826",
    "581",
    "840",
    "858",
    "860",
    "548",
    "862",
    "704",
    "092",
    "850",
    "876",
    "732",
    "887",
    "894",
    "716",
]


def get_code_type(value: str):
    """Returns the type of country code"""
    if value.isdigit():
        return "numeric"
    elif len(value) == 2 and value.isalpha():
        return "alpha2"
    elif len(value) == 3 and value.isalpha():
        return "alpha3"
    else:
        return "invalid"


@validator
def country_code(value: str, code: str = "auto"):
    """
    Validates if the given `value` is a valid country code.

    Args:
        value (str):
            Country code string to validate.

        code (str, optional):
            The type of country code to validate. Valid options are 'alpha2',
            'alpha3', 'numeric', or 'auto' to automatically identify the type.
            Default is 'auto'.

    Returns:
        bool:
            True if `value` is a valid country code of the specified type.
            False otherwise.

    Examples:
        >>> country_code('US')
        # Output: True
        >>> country_code('usa')
        # Output: False
        >>> country_code('USA', code='alpha3')
        # Output: False
        >>> country_code('840', code='numeric')
        # Output: True
        >>> country_code('Us', code='alpha2')
        # Output: True

    Note:
        - The function performs a case-insensitive validation.
        - Leading and trailing whitespaces in the `value` are automatically removed.

    > *New in version 0.21.1*
    """

    if not value:
        return False
    else:
        value = value.strip()
        value = value.upper()

    try:
        if code == "auto":
            code = get_code_type(value)
            if code == "invalid":
                return False

        if code == "alpha2":
            return value in alpha2_list
        elif code == "alpha3":
            return value in alpha3_list
        elif code == "numeric":
            return value in numeric_list
    except:
        return False
    return False
